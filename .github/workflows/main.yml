name: üóìÔ∏è Daily Sitemap Build & Publish

on:
  schedule:
    - cron: "0 1 * * *"   # 01:00 UTC daily
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build-publish:
    runs-on: ubuntu-latest

    env:
      # ===== customize these =====
      CSV_URL: https://storage.googleapis.com/sitemaps.leeladiamond.com/Googlefinal/combined_google_merchant_feed.csv
      LINK_COL: link
      GCS_BUCKET: sitemaps.leeladiamond.com
      OUTPUT_DIR: ./sitemaps_out
      PUBLIC_BASE_URL: https://www.leeladiamond.com/sitemaps   # << force WWW
      PER_FILE: "50000"
      SITEMAP_INDEX_NAME: sitemap-index.xml
      SITEMAP_PREFIX: leela-products-
      # ===========================

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install pandas

      # ---------- sanity check ----------
      - name: Check CSV & column
        env:
          CSV_URL: ${{ env.CSV_URL }}
          LINK_COL: ${{ env.LINK_COL }}
        run: |
          python - <<'PY'
          import os, sys, pandas as pd
          url = os.environ["CSV_URL"]
          col = os.environ["LINK_COL"]
          df = pd.read_csv(url, dtype=str, nrows=5)
          if col not in df.columns:
              print(f"ERROR: column '{col}' not found. Columns: {list(df.columns)}")
              sys.exit(1)
          print("OK: CSV reachable and column present.")
          PY

      # ---------- auth to GCP ----------
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup gcloud (gsutil)
        uses: google-github-actions/setup-gcloud@v2
        with:
          install_components: gsutil

      # ---------- generate ----------
      - name: Generate sitemaps
        env:
          CSV_URL: ${{ env.CSV_URL }}
          OUTPUT_DIR: ${{ env.OUTPUT_DIR }}
          PUBLIC_BASE_URL: ${{ env.PUBLIC_BASE_URL }}
          PER_FILE: ${{ env.PER_FILE }}
          LINK_COL: ${{ env.LINK_COL }}
          SITEMAP_PREFIX: ${{ env.SITEMAP_PREFIX }}
          SITEMAP_INDEX_NAME: ${{ env.SITEMAP_INDEX_NAME }}
        run: |
          python scripts/generate_sitemaps.py \
            --csv "${CSV_URL}" \
            --outdir "${OUTPUT_DIR}" \
            --public-base-url "${PUBLIC_BASE_URL}" \
            --per-file "${PER_FILE}" \
            --link-column "${LINK_COL}" \
            --basename "${SITEMAP_PREFIX}" \
            --index-name "${SITEMAP_INDEX_NAME}"

      - name: Verify files exist
        env:
          OUTPUT_DIR: ${{ env.OUTPUT_DIR }}
          SITEMAP_INDEX_NAME: ${{ env.SITEMAP_INDEX_NAME }}
        run: |
          test -d "${OUTPUT_DIR}" || (echo "Missing ${OUTPUT_DIR}" && exit 1)
          ls -la "${OUTPUT_DIR}"
          test -f "${OUTPUT_DIR}/${SITEMAP_INDEX_NAME}" || (echo "${SITEMAP_INDEX_NAME} not found" && exit 1)

      - name: Upload sitemaps to GCS (/sitemaps/)
        env:
          GCS_BUCKET: ${{ env.GCS_BUCKET }}
          OUTPUT_DIR: ${{ env.OUTPUT_DIR }}
        run: |
          gsutil -m rsync -r -d "${OUTPUT_DIR}" "gs://${GCS_BUCKET}/sitemaps"
          gsutil -m setmeta \
            -h "Cache-Control:public, max-age=3600" \
            -h "Content-Type:application/xml; charset=utf-8" \
            "gs://${GCS_BUCKET}/sitemaps/*.xml" || true

      # optional: purge Cloudflare for the index (set these secrets to enable)
      - name: Purge Cloudflare cache (optional)
        env:
          CF_ZONE_ID: ${{ secrets.CF_ZONE_ID }}
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          PUBLIC_BASE_URL: ${{ env.PUBLIC_BASE_URL }}
          SITEMAP_INDEX_NAME: ${{ env.SITEMAP_INDEX_NAME }}
        run: |
          if [ -n "${CF_ZONE_ID:-}" ] && [ -n "${CF_API_TOKEN:-}" ]; then
            URL="${PUBLIC_BASE_URL}/${SITEMAP_INDEX_NAME}"
            echo "Purging CF cache for ${URL}"
            curl -sS -X POST "https://api.cloudflare.com/client/v4/zones/${CF_ZONE_ID}/purge_cache" \
              -H "Authorization: Bearer ${CF_API_TOKEN}" \
              -H "Content-Type: application/json" \
              --data "{\"files\":[\"${URL}\"]}" | tee /tmp/cf_purge.json
            cat /tmp/cf_purge.json
          else
            echo "CF secrets not set; skipping purge."
          fi
